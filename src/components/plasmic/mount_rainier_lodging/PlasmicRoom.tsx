// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: yJQJQRQE7L

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import Button from "../../Button"; // plasmic-import: 0GSRDNreqxvH/component
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicRoom.module.css"; // plasmic-import: yJQJQRQE7L/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tDLsyY6XWLzrO/icon

export type PlasmicRoom__VariantMembers = {};
export type PlasmicRoom__VariantsArgs = {};
type VariantPropType = keyof PlasmicRoom__VariantsArgs;
export const PlasmicRoom__VariantProps = new Array<VariantPropType>();

export type PlasmicRoom__ArgsType = {
  roomName?: React.ReactNode;
  roomDescription?: React.ReactNode;
  roomAvailability?: React.ReactNode;
  roomPicture?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRoom__ArgsType;
export const PlasmicRoom__ArgProps = new Array<ArgPropType>(
  "roomName",
  "roomDescription",
  "roomAvailability",
  "roomPicture"
);

export type PlasmicRoom__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
};

export interface DefaultRoomProps {
  roomName?: React.ReactNode;
  roomDescription?: React.ReactNode;
  roomAvailability?: React.ReactNode;
  roomPicture?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRoom__RenderFunc(props: {
  variants: PlasmicRoom__VariantsArgs;
  args: PlasmicRoom__ArgsType;
  overrides: PlasmicRoom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__n9MlQ)}>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__im7KV)}>
              <div className={classNames(projectcss.all, sty.freeBox__cxurc)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___22WVh)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__vNxFg
                          )}
                          field={"name" as const}
                        />
                      ),

                      value: args.roomName
                    })}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zqiei)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents:
                          "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text .",
                        value: args.roomDescription,
                        className: classNames(sty.slotTargetRoomDescription)
                      })}
                    </div>
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__vZ21M
                          )}
                          color={"sand" as const}
                          link={"#" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fJi6M
                            )}
                          >
                            {"See availability"}
                          </div>
                        </Button>
                      ),
                      value: args.roomAvailability
                    })}
                  </p.Stack>
                ) : null}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__dHRz)}>
              <div className={classNames(projectcss.all, sty.freeBox__kPr6B)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <ProductMedia
                      className={classNames(
                        "__wab_instance",
                        sty.productMedia__w2Jeg
                      )}
                    />
                  ),

                  value: args.roomPicture
                })}
              </div>
            </div>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoom__VariantsArgs;
    args?: PlasmicRoom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRoom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRoom__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRoom__ArgProps,
          internalVariantPropNames: PlasmicRoom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRoom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoom";
  } else {
    func.displayName = `PlasmicRoom.${nodeName}`;
  }
  return func;
}

export const PlasmicRoom = Object.assign(
  // Top-level PlasmicRoom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicRoom
    internalVariantProps: PlasmicRoom__VariantProps,
    internalArgProps: PlasmicRoom__ArgProps
  }
);

export default PlasmicRoom;
/* prettier-ignore-end */
