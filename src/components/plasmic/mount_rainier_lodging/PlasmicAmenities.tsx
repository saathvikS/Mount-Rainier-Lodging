// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: 3vLgE3krIC
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: 1afyPt5Gh0q/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Button from "../../Button"; // plasmic-import: 0GSRDNreqxvH/component
import FooterTop from "../../FooterTop"; // plasmic-import: GuV31ro_WY/component
import Footer from "../../Footer"; // plasmic-import: IDlLfPVadLh/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: rDEJujvel4T/component

import { useScreenVariants as useScreenVariantsjNh4R65QhDehJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jNH4r65QhDehJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicAmenities.module.css"; // plasmic-import: 3vLgE3krIC/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tDLsyY6XWLzrO/icon
import mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm from "./images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpeg"; // plasmic-import: vemFS-lYeBbSm/picture
import coconut1JpgOmLgcR2KgB0Ci from "./images/coconut1Jpg.jpeg"; // plasmic-import: OmLgcR2KgB0Ci/picture

export type PlasmicAmenities__VariantMembers = {};
export type PlasmicAmenities__VariantsArgs = {};
type VariantPropType = keyof PlasmicAmenities__VariantsArgs;
export const PlasmicAmenities__VariantProps = new Array<VariantPropType>();

export type PlasmicAmenities__ArgsType = {};
type ArgPropType = keyof PlasmicAmenities__ArgsType;
export const PlasmicAmenities__ArgProps = new Array<ArgPropType>();

export type PlasmicAmenities__OverridesType = {
  root?: p.Flex<"div">;
  headerMainSection?: p.Flex<"div">;
  container?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  h1?: p.Flex<"h1">;
  section1?: p.Flex<"div">;
  rowContainer8?: p.Flex<"div">;
  brownColorBg?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  rowContainer3?: p.Flex<"div">;
  rowContainer4?: p.Flex<"div">;
  section13?: p.Flex<"div">;
  rowContainer5?: p.Flex<"div">;
  rowContainer6?: p.Flex<"div">;
  section14?: p.Flex<"div">;
  rowContainer7?: p.Flex<"div">;
  rowContainer9?: p.Flex<"div">;
  footerTop?: p.Flex<typeof FooterTop>;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultAmenitiesProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAmenities__RenderFunc(props: {
  variants: PlasmicAmenities__VariantsArgs;
  args: PlasmicAmenities__ArgsType;
  overrides: PlasmicAmenities__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjNh4R65QhDehJ()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4SRg)}
              >
                <div
                  className={classNames(projectcss.all, sty.columns___4YlEd)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.column__odSeo)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__n4Bwj
                          )}
                        >
                          <Reveal
                            className={classNames(
                              "__wab_instance",
                              sty.reveal__n889U
                            )}
                            duration={1500 as const}
                            triggerOnce={false}
                          >
                            <h1
                              data-plasmic-name={"h1"}
                              data-plasmic-override={overrides.h1}
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1
                              )}
                            >
                              {"Amenities."}
                            </h1>
                          </Reveal>
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              </p.Stack>
            </div>
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___60Z7Q)}>
              <div
                data-plasmic-name={"section1"}
                data-plasmic-override={overrides.section1}
                className={classNames(projectcss.all, sty.section1)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__kc80Q)}
                  duration={2000 as const}
                  triggerOnce={false}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__x74Di)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__qGnx9)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"rowContainer8"}
                        data-plasmic-override={overrides.rowContainer8}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer8
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__fy2Zs
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Enjoy the greatest amenities you will ever be offered."
                            : "Enjoy the greatest amenities you will ever be offered."}
                        </h2>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hBjx
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Mount Rainier Lodging has all the amenities you would expect plus some more. We want you to be able to sit back, relax, and enjoy your stay with us."
                            : "Mount Rainier Lodging has all the amenities you would expect plus some more. We want you to be able to sit back, relax, and enjoy your stay with us."}
                        </div>
                      </p.Stack>
                    </div>
                  </div>
                </Reveal>
              </div>
            </div>
          ) : null}

          <div
            data-plasmic-name={"brownColorBg"}
            data-plasmic-override={overrides.brownColorBg}
            className={classNames(projectcss.all, sty.brownColorBg)}
          >
            {true ? (
              <div
                data-plasmic-name={"section12"}
                data-plasmic-override={overrides.section12}
                className={classNames(projectcss.all, sty.section12)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ksUtk)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__jrTw9
                      )}
                      direction={"left" as const}
                      duration={2000 as const}
                      effect={"slide" as const}
                      triggerOnce={false}
                    >
                      <div
                        data-plasmic-name={"rowContainer3"}
                        data-plasmic-override={overrides.rowContainer3}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__tirUp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__aVlTz
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___75GI5
                              )}
                              loading={"lazy" as const}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__eWFn
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2__lRsmh
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Wellness Center"
                                      : "Wellness Center"}
                                  </h2>

                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : true
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bTiwM
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                        : "With daily yoga classes taught by world-class instructors, start your day right with the most rigorous and relaxing yoga program you will ever experience."}
                                    </div>
                                  ) : null}
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__cK9T
                                      )}
                                      color={"softBlue" as const}
                                      endIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__hJQm
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      startIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__nkLSf
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mvoJ
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___2Jsb
                      )}
                      direction={"right" as const}
                      duration={2000 as const}
                      effect={"slide" as const}
                      triggerOnce={false}
                    >
                      <div
                        data-plasmic-name={"rowContainer4"}
                        data-plasmic-override={overrides.rowContainer4}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__oEkKe
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__hZxkH
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6Cnk
                              )}
                              loading={"lazy" as const}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__nx1Mo
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2__j0L45
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Meeting and Event Space"
                                      : "Meeting and Event Space"}
                                  </h2>

                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : true
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yXzff
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                        : "Wedding, birthday party, special occasion? No problem! Come celebrate whatever you value the most with Mount Ranier Lodging and we will make it an unforgettable memory for you. "}
                                    </div>
                                  ) : null}
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__hoYmh
                                      )}
                                      color={"softBlue" as const}
                                      endIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__eskOn
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      startIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__o1T8O
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xHOo
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    </Reveal>
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"section13"}
                data-plasmic-override={overrides.section13}
                className={classNames(projectcss.all, sty.section13)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bt10L)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___4U1Xe
                      )}
                      direction={"left" as const}
                      duration={2000 as const}
                      effect={"slide" as const}
                      triggerOnce={false}
                    >
                      <div
                        data-plasmic-name={"rowContainer5"}
                        data-plasmic-override={overrides.rowContainer5}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer5
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns___6Jvn8
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__tjmwF
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hqrLm
                              )}
                              loading={"lazy" as const}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__druR3
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2___2TdX1
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "On-Site Dining"
                                      : "On-Site Dining"}
                                  </h2>

                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : true
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__mKYdq
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                        : "Enjoy  over fifteen different cuisines around the world prepared by five-star chefs."}
                                    </div>
                                  ) : null}
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button___4NZyp
                                      )}
                                      color={"softBlue" as const}
                                      endIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__djMd
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      startIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__eUvb8
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zusTe
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__zlTOy
                      )}
                      direction={"right" as const}
                      duration={2000 as const}
                      effect={"slide" as const}
                      triggerOnce={false}
                    >
                      <div
                        data-plasmic-name={"rowContainer6"}
                        data-plasmic-override={overrides.rowContainer6}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__msya4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__srnBp
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ie5Sg
                              )}
                              loading={"lazy" as const}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ypuN4
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2__wv0Lb
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Outdoor Activities"
                                      : "Outdoor Activities"}
                                  </h2>

                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : true
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__nsvgV
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                        : "Mount Rainier houses a plethora of activities from trails, peaks, parks, and gondola rides. We will ensure that you will never run out of activities to do."}
                                    </div>
                                  ) : null}
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button___7DPqr
                                      )}
                                      color={"softBlue" as const}
                                      endIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__hxt2
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      startIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___07Efy
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xgjVd
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    </Reveal>
                  </div>
                ) : null}
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"section14"}
                data-plasmic-override={overrides.section14}
                className={classNames(projectcss.all, sty.section14)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zPpFe)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__lGyCl
                      )}
                      direction={"left" as const}
                      duration={2000 as const}
                      effect={"slide" as const}
                      triggerOnce={false}
                    >
                      <div
                        data-plasmic-name={"rowContainer7"}
                        data-plasmic-override={overrides.rowContainer7}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer7
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__dJws
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__hTsuQ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__owcZe
                              )}
                              loading={"lazy" as const}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___88JrZ
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2__bvuq
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "24/7 Front Desk and Room Service"
                                      : "24/7 Front Desk and Room Service"}
                                  </h2>

                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : true
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___3Cf0R
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                        : "Any questions, concerns, or problems? Just give a call from your room's phone and someone will assist you immediately to make your stay better."}
                                    </div>
                                  ) : null}
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__wBwj
                                      )}
                                      color={"softBlue" as const}
                                      endIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__vm9Y6
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      startIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__hia0
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__bAPg
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__rwZvu
                      )}
                      direction={"right" as const}
                      duration={2000 as const}
                      effect={"slide" as const}
                      triggerOnce={false}
                    >
                      <div
                        data-plasmic-name={"rowContainer9"}
                        data-plasmic-override={overrides.rowContainer9}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns___3Z5A
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__ao9UX
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___4OupK
                              )}
                              loading={"lazy" as const}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5Mya
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2__wmWlA
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Free Parking"
                                      : "Free Parking"}
                                  </h2>

                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : true
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__mjuhx
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                        : "Enjoy free parking while your stay with us and save your hard-earned money on a better vacation."}
                                    </div>
                                  ) : null}
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button___1Ostp
                                      )}
                                      color={"softBlue" as const}
                                      endIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__fUd
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      startIcon={
                                        <ChecksvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__uf8T9
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__fQm8
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    </Reveal>
                  </div>
                ) : null}
              </div>
            ) : null}
          </div>

          <Reveal
            className={classNames("__wab_instance", sty.reveal__gUwNb)}
            duration={2000 as const}
            triggerOnce={false}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__njtGh)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xmo2R)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns___1IIt)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___31C4C
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___587Fx)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm,
                            fullWidth: 2734,
                            fullHeight: 4096,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___4DTnb
                          )}
                          href={`/acitvities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2___4S817
                                )}
                              >
                                {"Discover new adventures."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__g6Xun
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__eAp40)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: coconut1JpgOmLgcR2KgB0Ci,
                            fullWidth: 800,
                            fullHeight: 1200,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__ePzWq
                          )}
                          href={`/amenities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__zgSi9
                                )}
                              >
                                {"Luxurious Amenities."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </Reveal>

          <Reveal
            className={classNames("__wab_instance", sty.reveal__q8R5W)}
            duration={2000 as const}
            triggerOnce={false}
          >
            <FooterTop
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames("__wab_instance", sty.footerTop)}
            />
          </Reveal>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}

          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "navBar",
    "h1",
    "section1",
    "rowContainer8",
    "brownColorBg",
    "section12",
    "rowContainer3",
    "rowContainer4",
    "section13",
    "rowContainer5",
    "rowContainer6",
    "section14",
    "rowContainer7",
    "rowContainer9",
    "footerTop",
    "footer",
    "footerBottom"
  ],
  headerMainSection: ["headerMainSection", "container", "navBar", "h1"],
  container: ["container", "navBar", "h1"],
  navBar: ["navBar"],
  h1: ["h1"],
  section1: ["section1", "rowContainer8"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section12",
    "rowContainer3",
    "rowContainer4",
    "section13",
    "rowContainer5",
    "rowContainer6",
    "section14",
    "rowContainer7",
    "rowContainer9"
  ],
  section12: ["section12", "rowContainer3", "rowContainer4"],
  rowContainer3: ["rowContainer3"],
  rowContainer4: ["rowContainer4"],
  section13: ["section13", "rowContainer5", "rowContainer6"],
  rowContainer5: ["rowContainer5"],
  rowContainer6: ["rowContainer6"],
  section14: ["section14", "rowContainer7", "rowContainer9"],
  rowContainer7: ["rowContainer7"],
  rowContainer9: ["rowContainer9"],
  footerTop: ["footerTop"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  navBar: typeof NavBar;
  h1: "h1";
  section1: "div";
  rowContainer8: "div";
  brownColorBg: "div";
  section12: "div";
  rowContainer3: "div";
  rowContainer4: "div";
  section13: "div";
  rowContainer5: "div";
  rowContainer6: "div";
  section14: "div";
  rowContainer7: "div";
  rowContainer9: "div";
  footerTop: typeof FooterTop;
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAmenities__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAmenities__VariantsArgs;
    args?: PlasmicAmenities__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAmenities__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAmenities__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAmenities__ArgProps,
          internalVariantPropNames: PlasmicAmenities__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAmenities__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAmenities";
  } else {
    func.displayName = `PlasmicAmenities.${nodeName}`;
  }
  return func;
}

export const PlasmicAmenities = Object.assign(
  // Top-level PlasmicAmenities renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section12: makeNodeComponent("section12"),
    rowContainer3: makeNodeComponent("rowContainer3"),
    rowContainer4: makeNodeComponent("rowContainer4"),
    section13: makeNodeComponent("section13"),
    rowContainer5: makeNodeComponent("rowContainer5"),
    rowContainer6: makeNodeComponent("rowContainer6"),
    section14: makeNodeComponent("section14"),
    rowContainer7: makeNodeComponent("rowContainer7"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    footerTop: makeNodeComponent("footerTop"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicAmenities
    internalVariantProps: PlasmicAmenities__VariantProps,
    internalArgProps: PlasmicAmenities__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAmenities;
/* prettier-ignore-end */
