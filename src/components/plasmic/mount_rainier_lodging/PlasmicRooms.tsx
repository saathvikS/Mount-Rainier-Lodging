// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: wd5nAohZ5Tw

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import NavBar from "../../NavBar"; // plasmic-import: 1afyPt5Gh0q/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: BPdr9UnkUGcde/component
import Button from "../../Button"; // plasmic-import: 0GSRDNreqxvH/component
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import FooterTop from "../../FooterTop"; // plasmic-import: GuV31ro_WY/component
import Footer from "../../Footer"; // plasmic-import: IDlLfPVadLh/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: rDEJujvel4T/component

import { useScreenVariants as useScreenVariantsjNh4R65QhDehJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jNH4r65QhDehJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicRooms.module.css"; // plasmic-import: wd5nAohZ5Tw/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: f4b226_qaFgSE/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tDLsyY6XWLzrO/icon
import image77Nl4At013 from "./images/image7.jpeg"; // plasmic-import: 7NL4at013/picture
import image8YeOoCnLYw from "./images/image8.jpeg"; // plasmic-import: yeOOCnLYw/picture
import image9FLJcVEw8 from "./images/image9.jpeg"; // plasmic-import: fLJc-vEW8/picture
import mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm from "./images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpeg"; // plasmic-import: vemFS-lYeBbSm/picture
import coconut1JpgOmLgcR2KgB0Ci from "./images/coconut1Jpg.jpeg"; // plasmic-import: OmLgcR2KgB0Ci/picture

export type PlasmicRooms__VariantMembers = {};
export type PlasmicRooms__VariantsArgs = {};
type VariantPropType = keyof PlasmicRooms__VariantsArgs;
export const PlasmicRooms__VariantProps = new Array<VariantPropType>();

export type PlasmicRooms__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRooms__ArgsType;
export const PlasmicRooms__ArgProps = new Array<ArgPropType>("children");

export type PlasmicRooms__OverridesType = {
  root?: p.Flex<"div">;
  headerMainSection?: p.Flex<"div">;
  container?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  h1?: p.Flex<"h1">;
  section1?: p.Flex<"div">;
  rowContainer8?: p.Flex<"div">;
  brownColorBg?: p.Flex<"div">;
  section13?: p.Flex<"div">;
  rowContainer9?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  textInput2?: p.Flex<typeof TextInput>;
  section14?: p.Flex<"div">;
  rowContainer10?: p.Flex<"div">;
  productTextField?: p.Flex<typeof ProductTextField>;
  textInput3?: p.Flex<typeof TextInput>;
  textInput4?: p.Flex<typeof TextInput>;
  section15?: p.Flex<"div">;
  rowContainer11?: p.Flex<"div">;
  textInput5?: p.Flex<typeof TextInput>;
  textInput6?: p.Flex<typeof TextInput>;
  footerTop?: p.Flex<typeof FooterTop>;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultRoomsProps {
  children?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRooms__RenderFunc(props: {
  variants: PlasmicRooms__VariantsArgs;
  args: PlasmicRooms__ArgsType;
  overrides: PlasmicRooms__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjNh4R65QhDehJ()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <ParallaxWrapper
            className={classNames("__wab_instance", sty.scrollParallax___8Qm35)}
            speed={20 as const}
          >
            <div
              data-plasmic-name={"headerMainSection"}
              data-plasmic-override={overrides.headerMainSection}
              className={classNames(projectcss.all, sty.headerMainSection)}
            >
              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(projectcss.all, sty.container)}
              >
                <NavBar
                  data-plasmic-name={"navBar"}
                  data-plasmic-override={overrides.navBar}
                  className={classNames("__wab_instance", sty.navBar)}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__c9Den)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__fjCiD)}
                    duration={1500 as const}
                    triggerOnce={false}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Explore our Luxurious Rooms."}
                    </h1>
                  </Reveal>
                </p.Stack>
              </div>
            </div>
          </ParallaxWrapper>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__oImN8)}>
              <div
                data-plasmic-name={"section1"}
                data-plasmic-override={overrides.section1}
                className={classNames(projectcss.all, sty.section1)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__g25Vu)}
                  duration={2000 as const}
                  effect={"fade" as const}
                  reverse={false}
                  triggerOnce={false}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax__ub2L2
                    )}
                    speed={20 as const}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__pKhX)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___9I0Hr
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"rowContainer8"}
                          data-plasmic-override={overrides.rowContainer8}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.rowContainer8
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__wpIoz
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Every Price Range. No Compromises."
                              : "Every Price Range. No Compromises."}
                          </h2>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yaSl4
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "We pride ourselves in knowing that we offer luxurious rooms regardless of how much your budget is. Why compromise when you can have it all? Welcome to the Mount Ranier Lodging Family! "
                              : "We pride ourselves in knowing that we offer luxurious rooms regardless of how much your budget is. Why compromise when you can have it all? Welcome to the Mount Rainier Lodging Family! "}
                          </div>
                        </p.Stack>
                      </div>
                    </div>
                  </ParallaxWrapper>
                </Reveal>
              </div>
            </div>
          ) : null}
          <ParallaxWrapper
            className={classNames("__wab_instance", sty.scrollParallax__hOngv)}
            disabled={false}
            speed={10 as const}
          >
            <div
              data-plasmic-name={"brownColorBg"}
              data-plasmic-override={overrides.brownColorBg}
              className={classNames(projectcss.all, sty.brownColorBg)}
            >
              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__ucscY
                )}
                disabled={true}
                speed={20 as const}
              >
                <Reveal
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal__uteu)}
                  delay={1.5 as const}
                  direction={"right" as const}
                  duration={1500 as const}
                  effect={"slide" as const}
                  reverse={false}
                  triggerOnce={false}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"section13"}
                      data-plasmic-override={overrides.section13}
                      className={classNames(projectcss.all, sty.section13)}
                    >
                      <div
                        data-plasmic-name={"rowContainer9"}
                        data-plasmic-override={overrides.rowContainer9}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer9
                        )}
                      >
                        <ProductBox
                          className={classNames(
                            "__wab_instance",
                            sty.productBox__h47ZG
                          )}
                          id={"63bb8d07ad447c0012f2cdb9" as const}
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__a86Z
                                )}
                              >
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__nKx1N
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__jsr2M
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__dsQp1
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__pvIdW
                                          )}
                                        >
                                          {true ? (
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___78W5U
                                              )}
                                            >
                                              <ProductBox
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productBox___4GIzH
                                                )}
                                                id={
                                                  "63bb9ca49dc091001204e057" as const
                                                }
                                              >
                                                <ph.DataCtxReader>
                                                  {$ctx => (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__beLPy
                                                      )}
                                                    >
                                                      {"Standard Suite"}
                                                    </div>
                                                  )}
                                                </ph.DataCtxReader>
                                              </ProductBox>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__vrJq
                                                )}
                                              >
                                                {hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "This is the economy suite we offer. The Standard Suite comes with a single queen bed, a single walk-in shower bathroom and a balcony view. Accommodates for 1-2 people.\n\n$129.00"
                                                  : "This is the economy suite we offer. The Standard Suite comes with a single queen bed, a single walk-in shower bathroom and a balcony view. Accommodates for 1-2 people.\n\n$129.00"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__qlZlq
                                                )}
                                              >
                                                {"Check-in Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput"}
                                                data-plasmic-override={
                                                  overrides.textInput
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput", "value"]
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__nirgX
                                                )}
                                              >
                                                {"Check-out Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput2"}
                                                data-plasmic-override={
                                                  overrides.textInput2
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput2
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput2", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput2", "value"]
                                                )}
                                              />

                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__kOfxZ
                                                )}
                                                color={"sand" as const}
                                                link={
                                                  "https://mount-ranier-lodging.swell.store/buy/8Pwj97Am" as const
                                                }
                                              >
                                                <a
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__s6DH5
                                                  )}
                                                  href={
                                                    "https://mount-ranier-lodging.swell.store/buy/8Pwj97Am" as const
                                                  }
                                                  target={"_blank" as const}
                                                >
                                                  {"See availability"}
                                                </a>
                                              </Button>
                                            </p.Stack>
                                          ) : null}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__mBdLz
                                        )}
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__dc6P)}
                                          displayHeight={"100%" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"100%" as const}
                                          loading={"lazy" as const}
                                          src={{
                                            src: image77Nl4At013,
                                            fullWidth: 1280,
                                            fullHeight: 720,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </ProductBox>
                      </div>
                    </div>
                  ) : null}
                </Reveal>
              </ParallaxWrapper>
              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax___8YEw3
                )}
                disabled={true}
                speed={20 as const}
              >
                <Reveal
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal__uWyHl)}
                  delay={1.5 as const}
                  direction={"left" as const}
                  duration={1500 as const}
                  effect={"slide" as const}
                  reverse={false}
                  triggerOnce={false}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"section14"}
                      data-plasmic-override={overrides.section14}
                      className={classNames(projectcss.all, sty.section14)}
                    >
                      <div
                        data-plasmic-name={"rowContainer10"}
                        data-plasmic-override={overrides.rowContainer10}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer10
                        )}
                      >
                        <ProductBox
                          className={classNames(
                            "__wab_instance",
                            sty.productBox__lgrAl
                          )}
                          id={"63bb8d07ad447c0012f2cdb9" as const}
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__j37Gv
                                )}
                              >
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jMiJ
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__ialHn
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__jp8Bx
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__eZAel
                                          )}
                                        >
                                          {true ? (
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__xwyaw
                                              )}
                                            >
                                              <ProductBox
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productBox__dx5Oa
                                                )}
                                                id={
                                                  "63bb9ca49dc091001204e057" as const
                                                }
                                              >
                                                <ph.DataCtxReader>
                                                  {$ctx => (
                                                    <ProductTextField
                                                      data-plasmic-name={
                                                        "productTextField"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.productTextField
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.productTextField
                                                      )}
                                                      field={"name" as const}
                                                    />
                                                  )}
                                                </ph.DataCtxReader>
                                              </ProductBox>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__x99HU
                                                )}
                                              >
                                                {hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "The Double Queen Suite is our most popular room by far at Mount Rainier Lodging. With two queen beds, a walk-in shower + bathtub bathroom, a balcony view, and a small kitchenette, this is the best bang for your buck. Accommodates 1-4 people."
                                                  : "The Double Queen Suite is our most popular room by far at Mount Rainier Lodging. With two queen beds, a walk-in shower + bathtub bathroom, a balcony view, and a small kitchenette, this is the best bang for your buck. Accommodates 1-4 people.\n\n$179.00"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__rmnFa
                                                )}
                                              >
                                                {"Check-in Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput3"}
                                                data-plasmic-override={
                                                  overrides.textInput3
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput3
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput3", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput3", "value"]
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__zcViJ
                                                )}
                                              >
                                                {"Check-out Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput4"}
                                                data-plasmic-override={
                                                  overrides.textInput4
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput4
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput4", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput4", "value"]
                                                )}
                                              />

                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__sPNw
                                                )}
                                                color={"sand" as const}
                                                link={
                                                  "https://mount-ranier-lodging.swell.store/buy/tPNGYtaQ" as const
                                                }
                                              >
                                                <a
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__kZyaa
                                                  )}
                                                  href={
                                                    "https://mount-ranier-lodging.swell.store/buy/tPNGYtaQ" as const
                                                  }
                                                  target={"_blank" as const}
                                                >
                                                  {"See availability"}
                                                </a>
                                              </Button>
                                            </p.Stack>
                                          ) : null}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__luIKm
                                        )}
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__f4827)}
                                          displayHeight={"100%" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"100%" as const}
                                          loading={"lazy" as const}
                                          src={{
                                            src: image8YeOoCnLYw,
                                            fullWidth: 1280,
                                            fullHeight: 720,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </ProductBox>
                      </div>
                    </div>
                  ) : null}
                </Reveal>
              </ParallaxWrapper>
              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__cAr6Y
                )}
                disabled={true}
                speed={20 as const}
              >
                <Reveal
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal__qnjQh)}
                  delay={1.5 as const}
                  direction={"right" as const}
                  duration={1500 as const}
                  effect={"slide" as const}
                  reverse={false}
                  triggerOnce={false}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"section15"}
                      data-plasmic-override={overrides.section15}
                      className={classNames(projectcss.all, sty.section15)}
                    >
                      <div
                        data-plasmic-name={"rowContainer11"}
                        data-plasmic-override={overrides.rowContainer11}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer11
                        )}
                      >
                        <ProductBox
                          className={classNames(
                            "__wab_instance",
                            sty.productBox__w1P02
                          )}
                          id={"63bb8d07ad447c0012f2cdb9" as const}
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___1BZsU
                                )}
                              >
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___0TCtp
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__oaUa6
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__v6Gek
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__bbpOo
                                          )}
                                        >
                                          {true ? (
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___0VWgn
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__rs2Sh
                                                )}
                                              >
                                                {"Presidential Suite"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___1BM13
                                                )}
                                              >
                                                {hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "The Presidential Suite is our flagship room for VIPs who want utmost luxury while they stay at Mount Rainier Lodging. It has one private king bed, two queen beds, a private connected king-sized bathroom, and a regular bathroom along with an outdoor jacuzzi. Accomodates 1-6 people."
                                                  : "The Presidential Suite is our flagship room for VIPs who want utmost luxury while they stay at Mount Rainier Lodging. It has one private king bed, two queen beds, a private connected king-sized bathroom, and a regular bathroom along with an outdoor jacuzzi. Accomodates 1-6 people.\n\n$279.00"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__sMcj
                                                )}
                                              >
                                                {"Check-in Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput5"}
                                                data-plasmic-override={
                                                  overrides.textInput5
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput5
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput5", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput5", "value"]
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ht2ZA
                                                )}
                                              >
                                                {"Check-out Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput6"}
                                                data-plasmic-override={
                                                  overrides.textInput6
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput6
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput6", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput6", "value"]
                                                )}
                                              />

                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___75ZOv
                                                )}
                                                color={"sand" as const}
                                                link={
                                                  "https://mount-ranier-lodging.swell.store/buy/DvbokSaN" as const
                                                }
                                              >
                                                <a
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    sty.link__a99ZT
                                                  )}
                                                  href={
                                                    "https://mount-ranier-lodging.swell.store/buy/DvbokSaN" as const
                                                  }
                                                  target={"_blank" as const}
                                                >
                                                  {p.renderPlasmicSlot({
                                                    defaultContents:
                                                      "See availability",
                                                    value: args.children,
                                                    className: classNames(
                                                      sty.slotTargetChildren
                                                    )
                                                  })}
                                                </a>
                                              </Button>
                                            </p.Stack>
                                          ) : null}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__aUvYe
                                        )}
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__zd39)}
                                          displayHeight={"100%" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"100%" as const}
                                          loading={"lazy" as const}
                                          src={{
                                            src: image9FLJcVEw8,
                                            fullWidth: 1280,
                                            fullHeight: 720,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </ProductBox>
                      </div>
                    </div>
                  ) : null}
                </Reveal>
              </ParallaxWrapper>
            </div>
          </ParallaxWrapper>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__qzVbs)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__lrF8)}
                duration={2000 as const}
                triggerOnce={false}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wfvXa)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns___5Nb9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__pjRkP
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ztQYv)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm,
                            fullWidth: 2734,
                            fullHeight: 4096,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___0Vrtl
                          )}
                          href={`/acitvities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__spFnN
                                )}
                              >
                                {"Discover new adventures."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jcFxR
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__qwCdn)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: coconut1JpgOmLgcR2KgB0Ci,
                            fullWidth: 800,
                            fullHeight: 1200,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___7Wrzu
                          )}
                          href={`/amenities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__voSnN
                                )}
                              >
                                {"Luxurious Amenities."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </Reveal>
            </div>
          ) : null}
          <Reveal
            className={classNames("__wab_instance", sty.reveal__pFtMc)}
            duration={2000 as const}
            triggerOnce={false}
          >
            <FooterTop
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames("__wab_instance", sty.footerTop)}
            />
          </Reveal>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}
          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "navBar",
    "h1",
    "section1",
    "rowContainer8",
    "brownColorBg",
    "section13",
    "rowContainer9",
    "textInput",
    "textInput2",
    "section14",
    "rowContainer10",
    "productTextField",
    "textInput3",
    "textInput4",
    "section15",
    "rowContainer11",
    "textInput5",
    "textInput6",
    "footerTop",
    "footer",
    "footerBottom"
  ],
  headerMainSection: ["headerMainSection", "container", "navBar", "h1"],
  container: ["container", "navBar", "h1"],
  navBar: ["navBar"],
  h1: ["h1"],
  section1: ["section1", "rowContainer8"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section13",
    "rowContainer9",
    "textInput",
    "textInput2",
    "section14",
    "rowContainer10",
    "productTextField",
    "textInput3",
    "textInput4",
    "section15",
    "rowContainer11",
    "textInput5",
    "textInput6"
  ],
  section13: ["section13", "rowContainer9", "textInput", "textInput2"],
  rowContainer9: ["rowContainer9", "textInput", "textInput2"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  section14: [
    "section14",
    "rowContainer10",
    "productTextField",
    "textInput3",
    "textInput4"
  ],
  rowContainer10: [
    "rowContainer10",
    "productTextField",
    "textInput3",
    "textInput4"
  ],
  productTextField: ["productTextField"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  section15: ["section15", "rowContainer11", "textInput5", "textInput6"],
  rowContainer11: ["rowContainer11", "textInput5", "textInput6"],
  textInput5: ["textInput5"],
  textInput6: ["textInput6"],
  footerTop: ["footerTop"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  navBar: typeof NavBar;
  h1: "h1";
  section1: "div";
  rowContainer8: "div";
  brownColorBg: "div";
  section13: "div";
  rowContainer9: "div";
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  section14: "div";
  rowContainer10: "div";
  productTextField: typeof ProductTextField;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  section15: "div";
  rowContainer11: "div";
  textInput5: typeof TextInput;
  textInput6: typeof TextInput;
  footerTop: typeof FooterTop;
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRooms__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRooms__VariantsArgs;
    args?: PlasmicRooms__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRooms__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRooms__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRooms__ArgProps,
          internalVariantPropNames: PlasmicRooms__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRooms__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRooms";
  } else {
    func.displayName = `PlasmicRooms.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"x2CpsrHBvuW1zdv5pEkF5Z"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicRooms = Object.assign(
  // Top-level PlasmicRooms renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section13: makeNodeComponent("section13"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    productTextField: makeNodeComponent("productTextField"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    section15: makeNodeComponent("section15"),
    rowContainer11: makeNodeComponent("rowContainer11"),
    textInput5: makeNodeComponent("textInput5"),
    textInput6: makeNodeComponent("textInput6"),
    footerTop: makeNodeComponent("footerTop"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicRooms
    internalVariantProps: PlasmicRooms__VariantProps,
    internalArgProps: PlasmicRooms__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Rooms",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRooms;
/* prettier-ignore-end */
