// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: 6tEZDIlQ3KL

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: 1afyPt5Gh0q/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import Button from "../../Button"; // plasmic-import: 0GSRDNreqxvH/component
import FooterTop from "../../FooterTop"; // plasmic-import: GuV31ro_WY/component
import Footer from "../../Footer"; // plasmic-import: IDlLfPVadLh/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: rDEJujvel4T/component

import { useScreenVariants as useScreenVariantsjNh4R65QhDehJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jNH4r65QhDehJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: 6tEZDIlQ3KL/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tDLsyY6XWLzrO/icon
import mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm from "./images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpeg"; // plasmic-import: vemFS-lYeBbSm/picture
import coconut1JpgOmLgcR2KgB0Ci from "./images/coconut1Jpg.jpeg"; // plasmic-import: OmLgcR2KgB0Ci/picture

export type PlasmicAboutUs__VariantMembers = {};
export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  root?: p.Flex<"div">;
  headerMainSection?: p.Flex<"div">;
  container?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  h1?: p.Flex<"h1">;
  section1?: p.Flex<"div">;
  scrollParallax?: p.Flex<typeof ParallaxWrapper>;
  rowContainer8?: p.Flex<"div">;
  brownColorBg?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  rowContainer3?: p.Flex<"div">;
  section14?: p.Flex<"div">;
  rowContainer10?: p.Flex<"div">;
  footerTop?: p.Flex<typeof FooterTop>;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultAboutUsProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjNh4R65QhDehJ()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lXnwp)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__tm2Gp)}
                  duration={1500 as const}
                  triggerOnce={false}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"About us."}
                  </h1>
                </Reveal>
              </p.Stack>
            </div>
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zdGS)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__io0P2)}
                duration={2000 as const}
                triggerOnce={false}
              >
                <div
                  data-plasmic-name={"section1"}
                  data-plasmic-override={overrides.section1}
                  className={classNames(projectcss.all, sty.section1)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__v1IBg)}
                    duration={4000 as const}
                    effect={"fade" as const}
                    reverse={false}
                    triggerOnce={false}
                  >
                    <ParallaxWrapper
                      data-plasmic-name={"scrollParallax"}
                      data-plasmic-override={overrides.scrollParallax}
                      className={classNames(
                        "__wab_instance",
                        sty.scrollParallax
                      )}
                      speed={undefined}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns___68LSs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___91Axt
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"rowContainer8"}
                            data-plasmic-override={overrides.rowContainer8}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.rowContainer8
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2___1FxDx
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Every Price Range. No Compromises."
                                : "Our Mission."}
                            </h2>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oxDeO
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "We pride ourselves in knowing that we offer luxurious rooms regardless of how much your budget is. Why compromise when you can have it all? Welcome to the Mount Ranier Lodging Family! "
                                : "The founders at Mount Ranier Lodging strive to create a calm retreat for the people of our community while preserving our beautiful natural landscape for future generations to enjoy."}
                            </div>
                          </p.Stack>
                        </div>
                      </div>
                    </ParallaxWrapper>
                  </Reveal>
                </div>
              </Reveal>
            </div>
          ) : null}
          <div
            data-plasmic-name={"brownColorBg"}
            data-plasmic-override={overrides.brownColorBg}
            className={classNames(projectcss.all, sty.brownColorBg)}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__t66Mx)}
              duration={1500 as const}
              effect={"slide" as const}
              reverse={false}
              triggerOnce={false}
            >
              {true ? (
                <div
                  data-plasmic-name={"section12"}
                  data-plasmic-override={overrides.section12}
                  className={classNames(projectcss.all, sty.section12)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zwjs)}
                    >
                      <div
                        data-plasmic-name={"rowContainer3"}
                        data-plasmic-override={overrides.rowContainer3}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns___60Bkt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__pj62E
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___7JHmy
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pgs52
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__lOpRo
                                  )}
                                >
                                  {"Saathvik Somujayabalan\n"}
                                </h2>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ebIt4
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Co-founder \n\nMr. Saathvik Somujayabalan has been in the hotel industry for over seven years with many successful hotel chains around the world. He definitely knows a thing or two about running a business.\n"
                                    : "Co-founder \n\nMr. Saathvik Somujayabalan has been in the hotel industry for over seven years with many successful hotel chains around the world. He definitely knows a thing or two about running a business.\n"}
                                </div>
                                {true ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button___2Z1Tp
                                    )}
                                    color={"softBlue" as const}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6PyXu
                                      )}
                                    >
                                      {"Our Room"}
                                    </div>
                                  </Button>
                                ) : null}
                              </p.Stack>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}
            </Reveal>
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__ikSiy)}
              direction={"left" as const}
              duration={1500 as const}
              effect={"slide" as const}
              triggerOnce={false}
            >
              {true ? (
                <div
                  data-plasmic-name={"section14"}
                  data-plasmic-override={overrides.section14}
                  className={classNames(projectcss.all, sty.section14)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rEwB)}
                    >
                      <div
                        data-plasmic-name={"rowContainer10"}
                        data-plasmic-override={overrides.rowContainer10}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer10
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__t7Q0G
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__xhIeR
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__u4Dhc
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__l4WJd
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__ibEg
                                  )}
                                >
                                  {"Aahil Irfan"}
                                </h2>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cto7D
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Co-founder\n\nMr. Aahil Irfan has years of experience with hospitality management, event management, and owns twenty different Michelin-Star restaurants around the world. One day, he hopes to expand his successful group of businesses with Mr. Somujayabalan and open multiple resorts around the world to protect nature for future generations to come."
                                    : "Co-founder\n\nMr. Aahil Irfan has years of experience with hospitality management, event management, and owns twenty different Michelin-Star restaurants around the world. One day, he hopes to expand his successful group of businesses with Mr. Somujayabalan and open multiple resorts around the world to protect nature for future generations to come."}
                                </div>
                                {true ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button___8H4RH
                                    )}
                                    color={"softBlue" as const}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gzlV
                                      )}
                                    >
                                      {"Our Room"}
                                    </div>
                                  </Button>
                                ) : null}
                              </p.Stack>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}
            </Reveal>
          </div>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__hr6Kq)}
            duration={2000 as const}
            triggerOnce={false}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__podle)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tdAn3)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__qf6Li)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__iquRi
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__uZmbS)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm,
                            fullWidth: 2734,
                            fullHeight: 4096,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__zZb7
                          )}
                          href={`/acitvities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__avq6L
                                )}
                              >
                                {"Discover new adventures."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__oDh3J
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__p8C4L)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: coconut1JpgOmLgcR2KgB0Ci,
                            fullWidth: 800,
                            fullHeight: 1200,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link___1AwcO
                          )}
                          href={`/amenities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__yfwdy
                                )}
                              >
                                {"Luxurious Amenities."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal___4H3Ns)}
            duration={2000 as const}
            triggerOnce={false}
          >
            <FooterTop
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames("__wab_instance", sty.footerTop)}
            />
          </Reveal>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}
          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "navBar",
    "h1",
    "section1",
    "scrollParallax",
    "rowContainer8",
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section14",
    "rowContainer10",
    "footerTop",
    "footer",
    "footerBottom"
  ],
  headerMainSection: ["headerMainSection", "container", "navBar", "h1"],
  container: ["container", "navBar", "h1"],
  navBar: ["navBar"],
  h1: ["h1"],
  section1: ["section1", "scrollParallax", "rowContainer8"],
  scrollParallax: ["scrollParallax", "rowContainer8"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section14",
    "rowContainer10"
  ],
  section12: ["section12", "rowContainer3"],
  rowContainer3: ["rowContainer3"],
  section14: ["section14", "rowContainer10"],
  rowContainer10: ["rowContainer10"],
  footerTop: ["footerTop"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  navBar: typeof NavBar;
  h1: "h1";
  section1: "div";
  scrollParallax: typeof ParallaxWrapper;
  rowContainer8: "div";
  brownColorBg: "div";
  section12: "div";
  rowContainer3: "div";
  section14: "div";
  rowContainer10: "div";
  footerTop: typeof FooterTop;
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutUs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"x2CpsrHBvuW1zdv5pEkF5Z"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    scrollParallax: makeNodeComponent("scrollParallax"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section12: makeNodeComponent("section12"),
    rowContainer3: makeNodeComponent("rowContainer3"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    footerTop: makeNodeComponent("footerTop"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "About Us",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
