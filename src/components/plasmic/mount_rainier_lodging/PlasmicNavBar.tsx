// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: 1afyPt5Gh0q

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarButtons from "../../NavBarButtons"; // plasmic-import: iSh5ehqohY/component

import { useScreenVariants as useScreenVariantsjNh4R65QhDehJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jNH4r65QhDehJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicNavBar.module.css"; // plasmic-import: 1afyPt5Gh0q/css

import mountRanierLodgingLogopngOhYdvXmLh from "./images/mountRanierLodgingLogopng.png"; // plasmic-import: ohYDVXmLH/picture

export type PlasmicNavBar__VariantMembers = {};
export type PlasmicNavBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavBar__ArgsType = {};
type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBar__OverridesType = {
  menu?: p.Flex<"div">;
  menuBar?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultNavBarProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const dataSourcesCtx = usePlasmicDataSourceContext();
  const { cache, mutate } = usePlasmicDataConfig();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjNh4R65QhDehJ()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"menu"}
      data-plasmic-override={overrides.menu}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.menu
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"menuBar"}
        data-plasmic-override={overrides.menuBar}
        hasGap={true}
        className={classNames(projectcss.all, sty.menuBar)}
      >
        <a
          className={classNames(projectcss.all, projectcss.a, sty.link__euRiu)}
          href={`/`}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"100%" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"142px" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            src={{
              src: mountRanierLodgingLogopngOhYdvXmLh,
              fullWidth: 351,
              fullHeight: 343,
              aspectRatio: undefined
            }}
          />
        </a>
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <NavBarButtons
            className={classNames("__wab_instance", sty.navBarButtons___3Yqm)}
          >
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yIjUq
              )}
              href={`/rooms`}
            >
              {"Rooms"}
            </a>
          </NavBarButtons>
          <NavBarButtons
            className={classNames("__wab_instance", sty.navBarButtons__s3LnJ)}
          >
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ruJoa
              )}
              href={`/amenities`}
            >
              {"Amenities"}
            </a>
          </NavBarButtons>
          <NavBarButtons
            className={classNames("__wab_instance", sty.navBarButtons__cEzGs)}
          >
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__sriz9
              )}
              href={`/acitvities`}
            >
              {"Activities"}
            </a>
          </NavBarButtons>
          <NavBarButtons
            className={classNames("__wab_instance", sty.navBarButtons___4NMyg)}
          >
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ejf0Q
              )}
              href={`/about-us`}
            >
              {"About Us"}
            </a>
          </NavBarButtons>
          {(() => {
            try {
              return currentUser.isLoggedIn;
            } catch (e) {
              if (e instanceof TypeError) {
                return true;
              }
              throw e;
            }
          })() ? (
            <NavBarButtons
              className={classNames("__wab_instance", sty.navBarButtons__aA3ZN)}
            >
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__sziWr
                )}
                href={`/about-us`}
              >
                {"Account"}
              </a>
            </NavBarButtons>
          ) : null}
        </p.Stack>
        <NavBarButtons
          className={classNames("__wab_instance", sty.navBarButtons__x8P4)}
        >
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__l7Tdb
            )}
            href={undefined}
            onClick={async event => {
              const $steps = {};
              $steps["login"] = true
                ? (() => {
                    const actionArgs = {};
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "login",
                        interactionUuid: "ZOg5wDeeq",
                        componentUuid: "1afyPt5Gh0q"
                      },
                      () =>
                        (async ({ continueTo }) => {
                          function uuidv4() {
                            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(
                              /[018]/g,
                              c =>
                                (
                                  c ^
                                  (crypto.getRandomValues(
                                    new Uint8Array(1)
                                  )[0] &
                                    (15 >> (c / 4)))
                                ).toString(16)
                            );
                          }

                          async function sha256(text) {
                            const encoder = new TextEncoder();
                            const data = encoder.encode(text);
                            const hashBuffer = await crypto.subtle.digest(
                              "SHA-256",
                              data
                            );
                            const hashArray = Array.from(
                              new Uint8Array(hashBuffer)
                            );
                            const hashHex = hashArray
                              .map(b => b.toString(16).padStart(2, "0"))
                              .join("");
                            return hashHex;
                          }

                          const state = JSON.stringify({
                            continueTo: continueTo || window.location.href
                          });
                          const code_verifier = uuidv4();
                          localStorage.setItem("code_verifier", code_verifier);
                          const code_challenge = await sha256(code_verifier);

                          const params = new URLSearchParams();
                          params.set("client_id", "x2CpsrHBvuW1zdv5pEkF5Z");
                          params.set("state", state);
                          params.set("response_type", "code");
                          params.set("code_challenge", code_challenge);
                          params.set("code_challenge_method", "S256");

                          if (dataSourcesCtx?.authRedirectUri) {
                            params.set(
                              "redirect_uri",
                              dataSourcesCtx.authRedirectUri
                            );
                          }

                          if (window.__PLASMIC_AUTH_OVERRIDE) {
                            window.__PLASMIC_AUTH_OVERRIDE();
                          } else {
                            const url = `https://studio.plasmic.app/authorize?${params.toString()}`;
                            window.location.assign(url);
                          }
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["login"] === "object" &&
                typeof $steps["login"].then === "function"
              ) {
                $steps["login"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "login",
                    interactionUuid: "ZOg5wDeeq",
                    componentUuid: "1afyPt5Gh0q"
                  },
                  $steps["login"]
                );
              }
              $steps["airtableCreate"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: __wrapUserFunction(
                        {
                          type: "InteractionArgLoc",
                          actionName: "dataSourceOp",
                          interactionUuid: "EMh0ACuvr",
                          componentUuid: "1afyPt5Gh0q",
                          argName: "dataOp"
                        },
                        () => ({
                          sourceId: "2eNRs8vDuq79kWo1T8bmFo",
                          opId: "219876ef44e6d71918d76e794931de9cb4e939ea69a57a5748a761b99224574c42dec7c2de19c92295aff463df5767e972775e26b9b5b752b554a5553dcc98b4f1d227b022516b78e70adbc2c1911f399138c08deb9d7cd7018e49b9fefd6e020bb196fcda212a1c48db82227b8fbf11b82121f2d2d0daf76626fdcba80b265360cb5058c13df0f2f13a",
                          userArgs: {},
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        })
                      )
                    };
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "dataSourceOp",
                        interactionUuid: "EMh0ACuvr",
                        componentUuid: "1afyPt5Gh0q"
                      },
                      () =>
                        (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              { userAuthToken: dataSourcesCtx?.userAuthToken }
                            );
                            if (
                              dataOp.invalidatedKeys.find(
                                key => key === "plasmic_refresh_all"
                              )
                            ) {
                              Array.from(cache.keys()).forEach(key => {
                                mutate(key);
                              });
                              return response;
                            }
                            dataOp.invalidatedKeys?.forEach(invalidateKey =>
                              Array.from(cache.keys()).forEach(key => {
                                if (
                                  typeof key === "string" &&
                                  key.includes(`.$.${invalidateKey}.$.`)
                                ) {
                                  mutate(key);
                                }
                              })
                            );

                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["airtableCreate"] === "object" &&
                typeof $steps["airtableCreate"].then === "function"
              ) {
                $steps["airtableCreate"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "dataSourceOp",
                    interactionUuid: "EMh0ACuvr",
                    componentUuid: "1afyPt5Gh0q"
                  },
                  $steps["airtableCreate"]
                );
              }
            }}
          >
            {"Sign In"}
          </a>
        </NavBarButtons>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  menu: ["menu", "menuBar", "img", "freeBox"],
  menuBar: ["menuBar", "img", "freeBox"],
  img: ["img"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  menu: "div";
  menuBar: "div";
  img: typeof p.PlasmicImg;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavBar__ArgProps,
          internalVariantPropNames: PlasmicNavBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "menu") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("menu"),
  {
    // Helper components rendering sub-elements
    menuBar: makeNodeComponent("menuBar"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
