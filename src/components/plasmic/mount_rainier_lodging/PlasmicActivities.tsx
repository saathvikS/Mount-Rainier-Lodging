// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: 8y0EWuFHRBh

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: 1afyPt5Gh0q/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: BPdr9UnkUGcde/component
import Button from "../../Button"; // plasmic-import: 0GSRDNreqxvH/component
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import FooterTop from "../../FooterTop"; // plasmic-import: GuV31ro_WY/component
import Footer from "../../Footer"; // plasmic-import: IDlLfPVadLh/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: rDEJujvel4T/component

import { useScreenVariants as useScreenVariantsjNh4R65QhDehJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jNH4r65QhDehJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicActivities.module.css"; // plasmic-import: 8y0EWuFHRBh/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: f4b226_qaFgSE/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tDLsyY6XWLzrO/icon
import image77Nl4At013 from "./images/image7.jpeg"; // plasmic-import: 7NL4at013/picture
import image8YeOoCnLYw from "./images/image8.jpeg"; // plasmic-import: yeOOCnLYw/picture
import mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm from "./images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpeg"; // plasmic-import: vemFS-lYeBbSm/picture
import coconut1JpgOmLgcR2KgB0Ci from "./images/coconut1Jpg.jpeg"; // plasmic-import: OmLgcR2KgB0Ci/picture

export type PlasmicActivities__VariantMembers = {};
export type PlasmicActivities__VariantsArgs = {};
type VariantPropType = keyof PlasmicActivities__VariantsArgs;
export const PlasmicActivities__VariantProps = new Array<VariantPropType>();

export type PlasmicActivities__ArgsType = {};
type ArgPropType = keyof PlasmicActivities__ArgsType;
export const PlasmicActivities__ArgProps = new Array<ArgPropType>();

export type PlasmicActivities__OverridesType = {
  root?: p.Flex<"div">;
  headerMainSection?: p.Flex<"div">;
  container?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  h1?: p.Flex<"h1">;
  section1?: p.Flex<"div">;
  rowContainer8?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
  brownColorBg?: p.Flex<"div">;
  section13?: p.Flex<"div">;
  rowContainer9?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  section14?: p.Flex<"div">;
  rowContainer10?: p.Flex<"div">;
  textInput3?: p.Flex<typeof TextInput>;
  section15?: p.Flex<"div">;
  rowContainer11?: p.Flex<"div">;
  textInput5?: p.Flex<typeof TextInput>;
  footerTop?: p.Flex<typeof FooterTop>;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultActivitiesProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicActivities__RenderFunc(props: {
  variants: PlasmicActivities__VariantsArgs;
  args: PlasmicActivities__ArgsType;
  overrides: PlasmicActivities__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjNh4R65QhDehJ()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__npwMh)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__dl0Xh)}
                  duration={1500 as const}
                  triggerOnce={false}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Activities."}
                  </h1>
                </Reveal>
              </p.Stack>
            </div>
          </div>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__gYj8C)}>
              <div
                data-plasmic-name={"section1"}
                data-plasmic-override={overrides.section1}
                className={classNames(projectcss.all, sty.section1)}
              >
                <div className={classNames(projectcss.all, sty.columns__b1W3V)}>
                  <div
                    className={classNames(projectcss.all, sty.column___6EabX)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__lqFbY
                      )}
                      duration={2000 as const}
                      triggerOnce={false}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"rowContainer8"}
                        data-plasmic-override={overrides.rowContainer8}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer8
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___4NqaO
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Explore what Mount Ranier has to offer."
                            : "Explore what Mount Rainier has to offer."}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yjQrf
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Mount Rainier is surrounded with beautiful peaks, trails, and much more. Click on each pin to get directions or learn more about it."
                            : "Mount Rainier is surrounded with beautiful peaks, trails, and much more. Click on each pin to get directions or learn more about it."}
                        </div>
                      </p.Stack>
                    </Reveal>
                  </div>
                </div>
              </div>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__rm77I)}
                duration={3000 as const}
                triggerOnce={false}
              >
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ('<iframe src="https://www.google.com/maps/d/embed?mid=1UQg1ZbkHPmFcp0mHLIoG3WnRZYe4ExQ&ehbc=2E312F" width="400" height="489"></iframe>' as const)
                      : ('<iframe src="https://www.google.com/maps/d/embed?mid=1UQg1ZbkHPmFcp0mHLIoG3WnRZYe4ExQ&ehbc=2E312F" width="750" height="489"></iframe>' as const)
                  }
                />
              </Reveal>
            </div>
          ) : null}
          <Reveal
            className={classNames("__wab_instance", sty.reveal__pyB2D)}
            duration={2000 as const}
            triggerOnce={false}
          >
            <div
              data-plasmic-name={"brownColorBg"}
              data-plasmic-override={overrides.brownColorBg}
              className={classNames(projectcss.all, sty.brownColorBg)}
            >
              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__ssGp
                )}
                disabled={true}
                speed={20 as const}
              >
                <Reveal
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal__r57L)}
                  delay={1.5 as const}
                  direction={"right" as const}
                  duration={1500 as const}
                  effect={"slide" as const}
                  reverse={false}
                  triggerOnce={false}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"section13"}
                      data-plasmic-override={overrides.section13}
                      className={classNames(projectcss.all, sty.section13)}
                    >
                      <div
                        data-plasmic-name={"rowContainer9"}
                        data-plasmic-override={overrides.rowContainer9}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer9
                        )}
                      >
                        <ProductBox
                          className={classNames(
                            "__wab_instance",
                            sty.productBox__fuheA
                          )}
                          id={"63bb8d07ad447c0012f2cdb9" as const}
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iDypq
                                )}
                              >
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rfAx1
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__buN4H
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__ducQ
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__tmctp
                                          )}
                                        >
                                          {true ? (
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__hBj7M
                                              )}
                                            >
                                              <ProductBox
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productBox__lt8QA
                                                )}
                                                id={
                                                  "643aebd21de17d0014b5a310" as const
                                                }
                                              >
                                                <ph.DataCtxReader>
                                                  {$ctx => (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__uqP9O
                                                      )}
                                                    >
                                                      {"ATV Tours"}
                                                    </div>
                                                  )}
                                                </ph.DataCtxReader>
                                              </ProductBox>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__d8EyD
                                                )}
                                              >
                                                {hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "This is the economy suite we offer. The Standard Suite comes with a single queen bed, a single walk-in shower bathroom and a balcony view. Accommodates for 1-2 people.\n\n$129.00"
                                                  : "NEED TO ADD DESCRIPTION\n\n$89.00"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__wy20H
                                                )}
                                              >
                                                {"Tour Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput"}
                                                data-plasmic-override={
                                                  overrides.textInput
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput", "value"]
                                                )}
                                              />

                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__pGk0G
                                                )}
                                                color={"sand" as const}
                                                link={
                                                  "https://mount-ranier-lodging.swell.store/buy/8Pwj97Am" as const
                                                }
                                              >
                                                <a
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__oyAb3
                                                  )}
                                                  href={
                                                    "https://mount-ranier-lodging.swell.store/buy/8Pwj97Am" as const
                                                  }
                                                  target={"_blank" as const}
                                                >
                                                  {"See availability"}
                                                </a>
                                              </Button>
                                            </p.Stack>
                                          ) : null}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__dPl4C
                                        )}
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__aksNs)}
                                          displayHeight={"100%" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"100%" as const}
                                          loading={"lazy" as const}
                                          src={{
                                            src: image77Nl4At013,
                                            fullWidth: 1280,
                                            fullHeight: 720,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </ProductBox>
                      </div>
                    </div>
                  ) : null}
                </Reveal>
              </ParallaxWrapper>
              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax___0Y1G
                )}
                disabled={true}
                speed={20 as const}
              >
                <Reveal
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal___5KhD)}
                  delay={1.5 as const}
                  direction={"left" as const}
                  duration={1500 as const}
                  effect={"slide" as const}
                  reverse={false}
                  triggerOnce={false}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"section14"}
                      data-plasmic-override={overrides.section14}
                      className={classNames(projectcss.all, sty.section14)}
                    >
                      <div
                        data-plasmic-name={"rowContainer10"}
                        data-plasmic-override={overrides.rowContainer10}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer10
                        )}
                      >
                        <ProductBox
                          className={classNames(
                            "__wab_instance",
                            sty.productBox__x1P6M
                          )}
                          id={"63bb8d07ad447c0012f2cdb9" as const}
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__rdg4A
                                )}
                              >
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__p5CzM
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__x1Kr7
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column___4MeB6
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__kNqvh
                                          )}
                                        >
                                          {true ? (
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__e2FYk
                                              )}
                                            >
                                              <ProductBox
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productBox__kRyVc
                                                )}
                                                id={
                                                  "643aec1549d10500137ef4fe" as const
                                                }
                                              >
                                                <ph.DataCtxReader>
                                                  {$ctx => (
                                                    <ProductTextField
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.productTextField__bjFki
                                                      )}
                                                      field={"name" as const}
                                                    />
                                                  )}
                                                </ph.DataCtxReader>
                                              </ProductBox>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__pl6Nn
                                                )}
                                              >
                                                {hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "The Double Queen Suite is our most popular room by far at Mount Rainier Lodging. With two queen beds, a walk-in shower + bathtub bathroom, a balcony view, and a small kitchenette, this is the best bang for your buck. Accommodates 1-4 people."
                                                  : "NEED TO ADD DESCRIPTION\n\n$39.00"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ub2Jf
                                                )}
                                              >
                                                {"Tour Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput3"}
                                                data-plasmic-override={
                                                  overrides.textInput3
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput3
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput3", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput3", "value"]
                                                )}
                                              />

                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___6P9Tv
                                                )}
                                                color={"sand" as const}
                                                link={
                                                  "https://mount-ranier-lodging.swell.store/buy/tPNGYtaQ" as const
                                                }
                                              >
                                                <a
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__tjCrd
                                                  )}
                                                  href={
                                                    "https://mount-ranier-lodging.swell.store/buy/tPNGYtaQ" as const
                                                  }
                                                  target={"_blank" as const}
                                                >
                                                  {"See availability"}
                                                </a>
                                              </Button>
                                            </p.Stack>
                                          ) : null}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__kl1Jm
                                        )}
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__bPo1)}
                                          displayHeight={"100%" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"100%" as const}
                                          loading={"lazy" as const}
                                          src={{
                                            src: image8YeOoCnLYw,
                                            fullWidth: 1280,
                                            fullHeight: 720,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </ProductBox>
                      </div>
                    </div>
                  ) : null}
                </Reveal>
              </ParallaxWrapper>
              <ParallaxWrapper
                className={classNames(
                  "__wab_instance",
                  sty.scrollParallax__t7Ah4
                )}
                disabled={true}
                speed={20 as const}
              >
                <Reveal
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal__xBOxn)}
                  delay={1.5 as const}
                  direction={"left" as const}
                  duration={1500 as const}
                  effect={"slide" as const}
                  reverse={false}
                  triggerOnce={false}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"section15"}
                      data-plasmic-override={overrides.section15}
                      className={classNames(projectcss.all, sty.section15)}
                    >
                      <div
                        data-plasmic-name={"rowContainer11"}
                        data-plasmic-override={overrides.rowContainer11}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer11
                        )}
                      >
                        <ProductBox
                          className={classNames(
                            "__wab_instance",
                            sty.productBox__piLxa
                          )}
                          id={"63bb8d07ad447c0012f2cdb9" as const}
                        >
                          <ph.DataCtxReader>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__r58Pa
                                )}
                              >
                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__oYson
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.columns__aXzF
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__fuEl
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__eYsPt
                                          )}
                                        >
                                          {true ? (
                                            <p.Stack
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__bfrLy
                                              )}
                                            >
                                              <ProductBox
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.productBox__p4Vws
                                                )}
                                                id={
                                                  "643aec2df8d529001207ae85" as const
                                                }
                                              >
                                                <ph.DataCtxReader>
                                                  {$ctx => (
                                                    <ProductTextField
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.productTextField___7D5Mn
                                                      )}
                                                      field={"name" as const}
                                                    />
                                                  )}
                                                </ph.DataCtxReader>
                                              </ProductBox>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__oTsvg
                                                )}
                                              >
                                                {hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "The Double Queen Suite is our most popular room by far at Mount Rainier Lodging. With two queen beds, a walk-in shower + bathtub bathroom, a balcony view, and a small kitchenette, this is the best bang for your buck. Accommodates 1-4 people."
                                                  : "NEED TO ADD DESCRIPTION\n\n$19.00"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___5FuVb
                                                )}
                                              >
                                                {"Tour Date"}
                                              </div>
                                              <TextInput
                                                data-plasmic-name={"textInput5"}
                                                data-plasmic-override={
                                                  overrides.textInput5
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.textInput5
                                                )}
                                                onChange={(...eventArgs) => {
                                                  p.generateStateOnChangeProp(
                                                    $state,
                                                    ["textInput5", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }}
                                                placeholder={
                                                  "Check-in Date" as const
                                                }
                                                value={p.generateStateValueProp(
                                                  $state,
                                                  ["textInput5", "value"]
                                                )}
                                              />

                                              <Button
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__q7GGm
                                                )}
                                                color={"sand" as const}
                                                link={
                                                  "https://mount-ranier-lodging.swell.store/buy/tPNGYtaQ" as const
                                                }
                                              >
                                                <a
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.a,
                                                    projectcss.__wab_text,
                                                    sty.link__w4Tvi
                                                  )}
                                                  href={
                                                    "https://mount-ranier-lodging.swell.store/buy/tPNGYtaQ" as const
                                                  }
                                                  target={"_blank" as const}
                                                >
                                                  {"See availability"}
                                                </a>
                                              </Button>
                                            </p.Stack>
                                          ) : null}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__fmwez
                                        )}
                                      >
                                        <p.PlasmicImg
                                          alt={""}
                                          className={classNames(sty.img__l1Mh)}
                                          displayHeight={"100%" as const}
                                          displayMaxHeight={"none" as const}
                                          displayMaxWidth={"100%" as const}
                                          displayMinHeight={"0" as const}
                                          displayMinWidth={"0" as const}
                                          displayWidth={"100%" as const}
                                          loading={"lazy" as const}
                                          src={{
                                            src: image8YeOoCnLYw,
                                            fullWidth: 1280,
                                            fullHeight: 720,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                              </div>
                            )}
                          </ph.DataCtxReader>
                        </ProductBox>
                      </div>
                    </div>
                  ) : null}
                </Reveal>
              </ParallaxWrapper>
            </div>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__hKz6G)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__e54Ro)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__ptx5M)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__krwla
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___7OLh3)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm,
                            fullWidth: 2734,
                            fullHeight: 4096,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__bNdze
                          )}
                          href={`/acitvities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__zzLKo
                                )}
                              >
                                {"Discover new adventures."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__hstQk
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__xVswC)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: coconut1JpgOmLgcR2KgB0Ci,
                            fullWidth: 800,
                            fullHeight: 1200,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__guHLg
                          )}
                          href={`/amenities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__qkuRz
                                )}
                              >
                                {"Luxurious Amenities."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__hrZr5)}
            duration={2000 as const}
            triggerOnce={false}
          >
            <FooterTop
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames("__wab_instance", sty.footerTop)}
            />
          </Reveal>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}
          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "navBar",
    "h1",
    "section1",
    "rowContainer8",
    "embedHtml",
    "brownColorBg",
    "section13",
    "rowContainer9",
    "textInput",
    "section14",
    "rowContainer10",
    "textInput3",
    "section15",
    "rowContainer11",
    "textInput5",
    "footerTop",
    "footer",
    "footerBottom"
  ],
  headerMainSection: ["headerMainSection", "container", "navBar", "h1"],
  container: ["container", "navBar", "h1"],
  navBar: ["navBar"],
  h1: ["h1"],
  section1: ["section1", "rowContainer8"],
  rowContainer8: ["rowContainer8"],
  embedHtml: ["embedHtml"],
  brownColorBg: [
    "brownColorBg",
    "section13",
    "rowContainer9",
    "textInput",
    "section14",
    "rowContainer10",
    "textInput3",
    "section15",
    "rowContainer11",
    "textInput5"
  ],
  section13: ["section13", "rowContainer9", "textInput"],
  rowContainer9: ["rowContainer9", "textInput"],
  textInput: ["textInput"],
  section14: ["section14", "rowContainer10", "textInput3"],
  rowContainer10: ["rowContainer10", "textInput3"],
  textInput3: ["textInput3"],
  section15: ["section15", "rowContainer11", "textInput5"],
  rowContainer11: ["rowContainer11", "textInput5"],
  textInput5: ["textInput5"],
  footerTop: ["footerTop"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  navBar: typeof NavBar;
  h1: "h1";
  section1: "div";
  rowContainer8: "div";
  embedHtml: typeof Embed;
  brownColorBg: "div";
  section13: "div";
  rowContainer9: "div";
  textInput: typeof TextInput;
  section14: "div";
  rowContainer10: "div";
  textInput3: typeof TextInput;
  section15: "div";
  rowContainer11: "div";
  textInput5: typeof TextInput;
  footerTop: typeof FooterTop;
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActivities__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActivities__VariantsArgs;
    args?: PlasmicActivities__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActivities__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicActivities__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicActivities__ArgProps,
          internalVariantPropNames: PlasmicActivities__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicActivities__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActivities";
  } else {
    func.displayName = `PlasmicActivities.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"x2CpsrHBvuW1zdv5pEkF5Z"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicActivities = Object.assign(
  // Top-level PlasmicActivities renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    embedHtml: makeNodeComponent("embedHtml"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section13: makeNodeComponent("section13"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    textInput: makeNodeComponent("textInput"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    textInput3: makeNodeComponent("textInput3"),
    section15: makeNodeComponent("section15"),
    rowContainer11: makeNodeComponent("rowContainer11"),
    textInput5: makeNodeComponent("textInput5"),
    footerTop: makeNodeComponent("footerTop"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicActivities
    internalVariantProps: PlasmicActivities__VariantProps,
    internalArgProps: PlasmicActivities__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Activities",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicActivities;
/* prettier-ignore-end */
