// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: n68H3Zqr_L

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: 1afyPt5Gh0q/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import Button from "../../Button"; // plasmic-import: 0GSRDNreqxvH/component
import FooterTop from "../../FooterTop"; // plasmic-import: GuV31ro_WY/component
import Footer from "../../Footer"; // plasmic-import: IDlLfPVadLh/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: rDEJujvel4T/component

import { useScreenVariants as useScreenVariantsjNh4R65QhDehJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jNH4r65QhDehJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicAccount.module.css"; // plasmic-import: n68H3Zqr_L/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tDLsyY6XWLzrO/icon
import image60EYproaUs from "./images/image6.png"; // plasmic-import: 0eYproaUs/picture
import stephanieHarveyOtUahHcqs0YUnsplash1JpgNOmC47CgRkNIb from "./images/stephanieHarveyOtUahHcqs0YUnsplash1Jpg.jpeg"; // plasmic-import: nOmC47cgRkNIb/picture
import spajpgC6Dz0ZInj3Lxc from "./images/spajpg.jpeg"; // plasmic-import: c6Dz0zINJ3Lxc/picture
import krystalNgDoppEkJjIbcUnsplashjpgDscWh7GhV9Iu from "./images/krystalNgDoppEkJjIbcUnsplashjpg.jpeg"; // plasmic-import: dscWH7Gh-v9IU/picture
import mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm from "./images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpeg"; // plasmic-import: vemFS-lYeBbSm/picture
import coconut1JpgOmLgcR2KgB0Ci from "./images/coconut1Jpg.jpeg"; // plasmic-import: OmLgcR2KgB0Ci/picture

export type PlasmicAccount__VariantMembers = {};
export type PlasmicAccount__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccount__VariantsArgs;
export const PlasmicAccount__VariantProps = new Array<VariantPropType>();

export type PlasmicAccount__ArgsType = {};
type ArgPropType = keyof PlasmicAccount__ArgsType;
export const PlasmicAccount__ArgProps = new Array<ArgPropType>();

export type PlasmicAccount__OverridesType = {
  root?: p.Flex<"div">;
  headerMainSection?: p.Flex<"div">;
  container?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  scrollParallax?: p.Flex<typeof ParallaxWrapper>;
  section1?: p.Flex<"div">;
  rowContainer8?: p.Flex<"div">;
  brownColorBg?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  rowContainer3?: p.Flex<"div">;
  section13?: p.Flex<"div">;
  rowContainer9?: p.Flex<"div">;
  section14?: p.Flex<"div">;
  rowContainer10?: p.Flex<"div">;
  footerTop?: p.Flex<typeof FooterTop>;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultAccountProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAccount__RenderFunc(props: {
  variants: PlasmicAccount__VariantsArgs;
  args: PlasmicAccount__ArgsType;
  overrides: PlasmicAccount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjNh4R65QhDehJ()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fyx3F)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__ikYz5)}
                  duration={2000 as const}
                  triggerOnce={false}
                >
                  <ParallaxWrapper
                    data-plasmic-name={"scrollParallax"}
                    data-plasmic-override={overrides.scrollParallax}
                    className={classNames("__wab_instance", sty.scrollParallax)}
                    speed={5 as const}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__a5Yo1
                        )}
                      >
                        {true ? (
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1__wcgXj
                            )}
                          >
                            {"Welcome."}
                          </h1>
                        ) : null}
                        {(() => {
                          try {
                            return !currentUser.isLoggedIn;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1__gd9Dc
                            )}
                          >
                            {"Please Sign In to Continue"}
                          </h1>
                        ) : null}
                      </div>
                    ) : null}
                  </ParallaxWrapper>
                </Reveal>
              </p.Stack>
            </div>
          </div>
          {(() => {
            try {
              return currentUser.isLoggedIn;
            } catch (e) {
              if (e instanceof TypeError) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__y10Mn)}>
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__bkl6N
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Your Account At a Glance"
                  : "Your Account At A Glance"}
              </h2>
              <div
                data-plasmic-name={"section1"}
                data-plasmic-override={overrides.section1}
                className={classNames(projectcss.all, sty.section1)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__sNvBs)}
                  duration={2000 as const}
                  triggerOnce={false}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__b4UNk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__xyFac)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__gNayM)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: image60EYproaUs,
                          fullWidth: 724,
                          fullHeight: 484,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__npQeD)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"rowContainer8"}
                        data-plasmic-override={overrides.rowContainer8}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer8
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rW7E4
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Five-star lodging with spectacular scenery, courtesy of Mt. Rainier, our lodge provides the perfect getaway for nature lovers, adventure seekers, and those looking to escape city life. Equipped with various on-site activities, a restaurant, and a wellness center, we are suited to fulfill all our residents' needs and desires."
                            : "Here you can check out all the details of your account including rewards points, future stays you have booked with us, and update any preferences you may have."}
                        </div>
                      </p.Stack>
                    </div>
                  </div>
                </Reveal>
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return currentUser.isLoggedIn;
            } catch (e) {
              if (e instanceof TypeError) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"brownColorBg"}
              data-plasmic-override={overrides.brownColorBg}
              className={classNames(projectcss.all, sty.brownColorBg)}
            >
              <Reveal
                cascade={true}
                className={classNames("__wab_instance", sty.reveal__me6KY)}
                duration={1500 as const}
                effect={"slide" as const}
                reverse={false}
                triggerOnce={false}
              >
                {true ? (
                  <div
                    data-plasmic-name={"section12"}
                    data-plasmic-override={overrides.section12}
                    className={classNames(projectcss.all, sty.section12)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___57Sg
                        )}
                      >
                        <div
                          data-plasmic-name={"rowContainer3"}
                          data-plasmic-override={overrides.rowContainer3}
                          className={classNames(
                            projectcss.all,
                            sty.rowContainer3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns___2QyGh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__gNld
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__ysq5N)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("230px" as const)
                                    : ("415px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: stephanieHarveyOtUahHcqs0YUnsplash1JpgNOmC47CgRkNIb,
                                  fullWidth: 640,
                                  fullHeight: 853,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__d6Dxb
                              )}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rjok7
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2___0HoAc
                                    )}
                                  >
                                    {"Reward Points"}
                                  </h2>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__peKyU
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Our hotel offers three types of rooms to cater to the needs of all guests. These room choices are standard, double, and presidential suites. Regardless of whatever room you choose, our staff is on hand 24/7 to ensure that your stay is as comfortable and enjoyable as possible."
                                      : "Here is how many rewards points you have: "}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tfgvi
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Our hotel offers three types of rooms to cater to the needs of all guests. These room choices are standard, double, and presidential suites. Regardless of whatever room you choose, our staff is on hand 24/7 to ensure that your stay is as comfortable and enjoyable as possible."
                                      : (() => {
                                          try {
                                            return undefined;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "Here is how many rewards points you have: ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                  </div>
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__ofqqq
                                      )}
                                      color={"softBlue" as const}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dbRov
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </Reveal>
              <Reveal
                cascade={true}
                className={classNames("__wab_instance", sty.reveal__ieo93)}
                direction={"right" as const}
                duration={1500 as const}
                effect={"slide" as const}
                reverse={false}
                triggerOnce={false}
              >
                {true ? (
                  <div
                    data-plasmic-name={"section13"}
                    data-plasmic-override={overrides.section13}
                    className={classNames(projectcss.all, sty.section13)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e6H9G
                        )}
                      >
                        <div
                          data-plasmic-name={"rowContainer9"}
                          data-plasmic-override={overrides.rowContainer9}
                          className={classNames(
                            projectcss.all,
                            sty.rowContainer9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__nLmBj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__yrkoE
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__aKxwI)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("230px" as const)
                                    : ("415px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: spajpgC6Dz0ZInj3Lxc,
                                  fullWidth: 800,
                                  fullHeight: 1200,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__s9Saz
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__sOaRw
                                )}
                              >
                                {"Future Stays"}
                              </h2>
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__nLpQ0
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___3CUe
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Located near the majestic Mt. Rainier, our hotel offers a range of exciting activities for guests to enjoy. From taking a scenic drive to relaxing in a hot tub, we provide activities that would suit both adventure seekers and people looking to unwind."
                                      : "Here are your future bookings with Mount Rainier Lodging. Hope you will have a great time!"}
                                  </div>
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__q8Zsb
                                      )}
                                      color={"softBlue" as const}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___9R7QU
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </Reveal>
              <Reveal
                cascade={true}
                className={classNames("__wab_instance", sty.reveal__sGy0Q)}
                direction={"left" as const}
                duration={1500 as const}
                effect={"slide" as const}
                triggerOnce={false}
              >
                {true ? (
                  <div
                    data-plasmic-name={"section14"}
                    data-plasmic-override={overrides.section14}
                    className={classNames(projectcss.all, sty.section14)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oyOd
                        )}
                      >
                        <div
                          data-plasmic-name={"rowContainer10"}
                          data-plasmic-override={overrides.rowContainer10}
                          className={classNames(
                            projectcss.all,
                            sty.rowContainer10
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__znkNa
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__mQgT8
                              )}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__yltb3)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("230px" as const)
                                    : ("415px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"100%" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: krystalNgDoppEkJjIbcUnsplashjpgDscWh7GhV9Iu,
                                  fullWidth: 2730,
                                  fullHeight: 4096,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__rRPgG
                              )}
                            >
                              {true ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uVEiW
                                  )}
                                >
                                  <h2
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2__lut
                                    )}
                                  >
                                    {"Past Stays"}
                                  </h2>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__pAwaT
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "Our hotel provides a range of amenities to ensure a comfortable and memorable stay. From on-site dining to a wellness center, we have everything needed to ensure everyone has a spectacular time at the hotel."
                                      : "Here are all the past stays you have had with us. We appreciate your business!"}
                                  </div>
                                  {true ? (
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__ql2Km
                                      )}
                                      color={"softBlue" as const}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zxN8Z
                                        )}
                                      >
                                        {"Our Room"}
                                      </div>
                                    </Button>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </Reveal>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__a32BK)}>
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zVuDg)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__cJbQ)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__i5S2R)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___41X1Z)}
                        displayHeight={"434px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("none" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm,
                          fullWidth: 2734,
                          fullHeight: 4096,
                          aspectRatio: undefined
                        }}
                      />

                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__ivCy3
                        )}
                        href={`/acitvities`}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__vXxmd
                              )}
                            >
                              {"Discover new adventures."}
                            </h2>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </a>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column___6La1O)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__yQq)}
                        displayHeight={"434px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("none" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: coconut1JpgOmLgcR2KgB0Ci,
                          fullWidth: 800,
                          fullHeight: 1200,
                          aspectRatio: undefined
                        }}
                      />

                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__zLxv1
                        )}
                        href={`/amenities`}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__uj9FX
                              )}
                            >
                              {"Luxurious Amenities."}
                            </h2>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </a>
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          <FooterTop
            data-plasmic-name={"footerTop"}
            data-plasmic-override={overrides.footerTop}
            className={classNames("__wab_instance", sty.footerTop)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "navBar",
    "scrollParallax",
    "section1",
    "rowContainer8",
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10",
    "footerTop",
    "footer",
    "footerBottom"
  ],
  headerMainSection: [
    "headerMainSection",
    "container",
    "navBar",
    "scrollParallax"
  ],
  container: ["container", "navBar", "scrollParallax"],
  navBar: ["navBar"],
  scrollParallax: ["scrollParallax"],
  section1: ["section1", "rowContainer8"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10"
  ],
  section12: ["section12", "rowContainer3"],
  rowContainer3: ["rowContainer3"],
  section13: ["section13", "rowContainer9"],
  rowContainer9: ["rowContainer9"],
  section14: ["section14", "rowContainer10"],
  rowContainer10: ["rowContainer10"],
  footerTop: ["footerTop"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  navBar: typeof NavBar;
  scrollParallax: typeof ParallaxWrapper;
  section1: "div";
  rowContainer8: "div";
  brownColorBg: "div";
  section12: "div";
  rowContainer3: "div";
  section13: "div";
  rowContainer9: "div";
  section14: "div";
  rowContainer10: "div";
  footerTop: typeof FooterTop;
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccount__VariantsArgs;
    args?: PlasmicAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccount__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAccount__ArgProps,
          internalVariantPropNames: PlasmicAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccount";
  } else {
    func.displayName = `PlasmicAccount.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"x2CpsrHBvuW1zdv5pEkF5Z"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicAccount = Object.assign(
  // Top-level PlasmicAccount renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    navBar: makeNodeComponent("navBar"),
    scrollParallax: makeNodeComponent("scrollParallax"),
    section1: makeNodeComponent("section1"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section12: makeNodeComponent("section12"),
    rowContainer3: makeNodeComponent("rowContainer3"),
    section13: makeNodeComponent("section13"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    footerTop: makeNodeComponent("footerTop"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicAccount
    internalVariantProps: PlasmicAccount__VariantProps,
    internalArgProps: PlasmicAccount__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccount;
/* prettier-ignore-end */
