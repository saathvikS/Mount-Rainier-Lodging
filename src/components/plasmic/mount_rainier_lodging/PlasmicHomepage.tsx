// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x2CpsrHBvuW1zdv5pEkF5Z
// Component: 5NWFVBf1bMUV
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: 1afyPt5Gh0q/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import Button from "../../Button"; // plasmic-import: 0GSRDNreqxvH/component
import FooterTop from "../../FooterTop"; // plasmic-import: GuV31ro_WY/component
import Footer from "../../Footer"; // plasmic-import: IDlLfPVadLh/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: rDEJujvel4T/component

import { useScreenVariants as useScreenVariantsjNh4R65QhDehJ } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jNH4r65QhDehJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mount_rainier_lodging.module.css"; // plasmic-import: x2CpsrHBvuW1zdv5pEkF5Z/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 5NWFVBf1bMUV/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: tDLsyY6XWLzrO/icon
import image60EYproaUs from "./images/image6.png"; // plasmic-import: 0eYproaUs/picture
import stephanieHarveyOtUahHcqs0YUnsplash1JpgNOmC47CgRkNIb from "./images/stephanieHarveyOtUahHcqs0YUnsplash1Jpg.jpeg"; // plasmic-import: nOmC47cgRkNIb/picture
import spajpgC6Dz0ZInj3Lxc from "./images/spajpg.jpeg"; // plasmic-import: c6Dz0zINJ3Lxc/picture
import krystalNgDoppEkJjIbcUnsplashjpgDscWh7GhV9Iu from "./images/krystalNgDoppEkJjIbcUnsplashjpg.jpeg"; // plasmic-import: dscWH7Gh-v9IU/picture
import mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm from "./images/mjTangonanOe6QLhRHhhsUnsplashjpg.jpeg"; // plasmic-import: vemFS-lYeBbSm/picture
import coconut1JpgOmLgcR2KgB0Ci from "./images/coconut1Jpg.jpeg"; // plasmic-import: OmLgcR2KgB0Ci/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerMainSection?: p.Flex<"div">;
  container?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  h1?: p.Flex<"h1">;
  section1?: p.Flex<"div">;
  rowContainer8?: p.Flex<"div">;
  brownColorBg?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  rowContainer3?: p.Flex<"div">;
  section13?: p.Flex<"div">;
  rowContainer9?: p.Flex<"div">;
  section14?: p.Flex<"div">;
  rowContainer10?: p.Flex<"div">;
  footerTop?: p.Flex<typeof FooterTop>;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjNh4R65QhDehJ()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerMainSection"}
            data-plasmic-override={overrides.headerMainSection}
            className={classNames(projectcss.all, sty.headerMainSection)}
          >
            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__er8E5)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__mvL4Z)}
                  duration={2000 as const}
                  triggerOnce={false}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax__qcCRu
                    )}
                    speed={5 as const}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vuSJp
                        )}
                      >
                        {true ? (
                          <h1
                            data-plasmic-name={"h1"}
                            data-plasmic-override={overrides.h1}
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1
                            )}
                          >
                            {
                              "Discover Mount Rainier and plan the perfect trip."
                            }
                          </h1>
                        ) : null}

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___9UQBu
                          )}
                          color={"sand" as const}
                          link={`/rooms`}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ygw2Q
                            )}
                          >
                            {"Book your stay now"}
                          </div>
                        </Button>
                      </div>
                    ) : null}
                  </ParallaxWrapper>
                </Reveal>
              </p.Stack>
            </div>
          </div>

          <ParallaxWrapper
            className={classNames("__wab_instance", sty.scrollParallax___5Xoyi)}
            speed={5 as const}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__fAgZv)}>
                <div
                  data-plasmic-name={"section1"}
                  data-plasmic-override={overrides.section1}
                  className={classNames(projectcss.all, sty.section1)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal___7Y4Lz)}
                    duration={2000 as const}
                    triggerOnce={false}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__yIbx9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___8Dqh
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___4G7Xi)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: image60EYproaUs,
                            fullWidth: 724,
                            fullHeight: 484,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__aQKuo
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"rowContainer8"}
                          data-plasmic-override={overrides.rowContainer8}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.rowContainer8
                          )}
                        >
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__dHsBh
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "About our hotel"
                              : "About our resort"}
                          </h2>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___20Bk
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Five-star lodging with spectacular scenery, courtesy of Mt. Rainier, our lodge provides the perfect getaway for nature lovers, adventure seekers, and those looking to escape city life. Equipped with various on-site activities, a restaurant, and a wellness center, we are suited to fulfill all our residents' needs and desires."
                              : "Five-star lodging with spectacular scenery, courtesy of Mt. Rainier, our lodge provides the perfect getaway for nature lovers, adventure seekers, and those looking to escape city life. Equipped with various on-site activities, a restaurant, and a wellness center, we are suited to fulfill all our residents' needs and desires."}
                          </div>
                        </p.Stack>
                      </div>
                    </div>
                  </Reveal>
                </div>
              </div>
            ) : null}
          </ParallaxWrapper>

          <div
            data-plasmic-name={"brownColorBg"}
            data-plasmic-override={overrides.brownColorBg}
            className={classNames(projectcss.all, sty.brownColorBg)}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__pAer3)}
              duration={1500 as const}
              effect={"slide" as const}
              reverse={false}
              triggerOnce={false}
            >
              {true ? (
                <div
                  data-plasmic-name={"section12"}
                  data-plasmic-override={overrides.section12}
                  className={classNames(projectcss.all, sty.section12)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fd7Vk)}
                    >
                      <div
                        data-plasmic-name={"rowContainer3"}
                        data-plasmic-override={overrides.rowContainer3}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__nfLzx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__u1Jk
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__fbRsu)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("230px" as const)
                                  : ("415px" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"100%" as const}
                              loading={"lazy" as const}
                              src={{
                                src: stephanieHarveyOtUahHcqs0YUnsplash1JpgNOmC47CgRkNIb,
                                fullWidth: 640,
                                fullHeight: 853,
                                aspectRatio: undefined
                              }}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__mnTfs
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__et4DM
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__aZE
                                  )}
                                >
                                  {"Our Rooms"}
                                </h2>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yjIcz
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Our hotel offers three types of rooms to cater to the needs of all guests. These room choices are standard, double, and presidential suites. Regardless of whatever room you choose, our staff is on hand 24/7 to ensure that your stay is as comfortable and enjoyable as possible."
                                    : "Our hotel offers three types of rooms to cater to the needs of all guests. These room choices are standard, double, and presidential suites. Regardless of whatever room you choose, our staff is on hand 24/7 to ensure that your stay is as comfortable and enjoyable as possible."}
                                </div>

                                {true ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__ou6Xf
                                    )}
                                    color={"softBlue" as const}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__g4CuT
                                      )}
                                    >
                                      {"Our Room"}
                                    </div>
                                  </Button>
                                ) : null}

                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___52FZ5
                                  )}
                                  color={"sand" as const}
                                  link={`/rooms`}
                                >
                                  {"View our rooms"}
                                </Button>
                              </p.Stack>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}
            </Reveal>

            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__zni2)}
              direction={"right" as const}
              duration={1500 as const}
              effect={"slide" as const}
              reverse={false}
              triggerOnce={false}
            >
              {true ? (
                <div
                  data-plasmic-name={"section13"}
                  data-plasmic-override={overrides.section13}
                  className={classNames(projectcss.all, sty.section13)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nqACi)}
                    >
                      <div
                        data-plasmic-name={"rowContainer9"}
                        data-plasmic-override={overrides.rowContainer9}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__zBy7Y
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__wj2Dk
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img___9JqAh)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("230px" as const)
                                  : ("415px" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"100%" as const}
                              loading={"lazy" as const}
                              src={{
                                src: spajpgC6Dz0ZInj3Lxc,
                                fullWidth: 800,
                                fullHeight: 1200,
                                aspectRatio: undefined
                              }}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__xVrwP
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__wn5U
                              )}
                            >
                              {"Our Activities"}
                            </h2>

                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bYboT
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xih40
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Located near the majestic Mt. Rainier, our hotel offers a range of exciting activities for guests to enjoy. From taking a scenic drive to relaxing in a hot tub, we provide activities that would suit both adventure seekers and people looking to unwind."
                                    : "Located near the majestic Mt. Rainier, our hotel offers a range of exciting activities for guests to enjoy. From taking a scenic drive to relaxing in a hot tub, we provide activities that would suit both adventure seekers and people looking to unwind."}
                                </div>

                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__gM2Wj
                                  )}
                                  color={"sand" as const}
                                  link={`/acitvities`}
                                >
                                  {"View our activities"}
                                </Button>

                                {true ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__z19G
                                    )}
                                    color={"softBlue" as const}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__i2GH0
                                      )}
                                    >
                                      {"Our Room"}
                                    </div>
                                  </Button>
                                ) : null}
                              </p.Stack>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}
            </Reveal>

            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__abMZ)}
              direction={"left" as const}
              duration={1500 as const}
              effect={"slide" as const}
              triggerOnce={false}
            >
              {true ? (
                <div
                  data-plasmic-name={"section14"}
                  data-plasmic-override={overrides.section14}
                  className={classNames(projectcss.all, sty.section14)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oIzMl)}
                    >
                      <div
                        data-plasmic-name={"rowContainer10"}
                        data-plasmic-override={overrides.rowContainer10}
                        className={classNames(
                          projectcss.all,
                          sty.rowContainer10
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__tQpdR
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__wrqnx
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__vffl2)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? ("230px" as const)
                                  : ("415px" as const)
                              }
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"100%" as const}
                              loading={"lazy" as const}
                              src={{
                                src: krystalNgDoppEkJjIbcUnsplashjpgDscWh7GhV9Iu,
                                fullWidth: 2730,
                                fullHeight: 4096,
                                aspectRatio: undefined
                              }}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__s6YGp
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lBq8
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__fYu02
                                  )}
                                >
                                  {"Our Amenities"}
                                </h2>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nYlco
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Our hotel provides a range of amenities to ensure a comfortable and memorable stay. From on-site dining to a wellness center, we have everything needed to ensure everyone has a spectacular time at the hotel."
                                    : "Our hotel provides a range of amenities to ensure a comfortable and memorable stay. From on-site dining to a wellness center, we have everything needed to ensure everyone has a spectacular time at the hotel."}
                                </div>

                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__qzKAm
                                  )}
                                  color={"sand" as const}
                                  link={`/amenities`}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yOwZj
                                    )}
                                  >
                                    {"View our Amenities"}
                                  </div>
                                </Button>

                                {true ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__njox0
                                    )}
                                    color={"softBlue" as const}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___4QeyJ
                                      )}
                                    >
                                      {"Our Room"}
                                    </div>
                                  </Button>
                                ) : null}
                              </p.Stack>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}
            </Reveal>
          </div>

          <Reveal
            className={classNames("__wab_instance", sty.reveal__ecPvf)}
            duration={2000 as const}
            triggerOnce={false}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__kfBiB)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__l6RI)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__fAVzn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__bBv8X
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___4GmWc)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: mjTangonanOe6QLhRHhhsUnsplashjpgVemFsLYeBbSm,
                            fullWidth: 2734,
                            fullHeight: 4096,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__qh44Z
                          )}
                          href={`/acitvities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__rlWbm
                                )}
                              >
                                {"Discover new adventures."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__xnlEm
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mSrLv)}
                          displayHeight={"434px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("none" as const)
                              : ("100%" as const)
                          }
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: coconut1JpgOmLgcR2KgB0Ci,
                            fullWidth: 800,
                            fullHeight: 1200,
                            aspectRatio: undefined
                          }}
                        />

                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__txdMg
                          )}
                          href={`/amenities`}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__b0A05
                                )}
                              >
                                {"Luxurious Amenities."}
                              </h2>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </a>
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </Reveal>

          <Reveal
            className={classNames("__wab_instance", sty.reveal__i4SSw)}
            duration={2000 as const}
            triggerOnce={false}
          >
            <FooterTop
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames("__wab_instance", sty.footerTop)}
            />
          </Reveal>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}

          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMainSection",
    "container",
    "navBar",
    "h1",
    "section1",
    "rowContainer8",
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10",
    "footerTop",
    "footer",
    "footerBottom"
  ],
  headerMainSection: ["headerMainSection", "container", "navBar", "h1"],
  container: ["container", "navBar", "h1"],
  navBar: ["navBar"],
  h1: ["h1"],
  section1: ["section1", "rowContainer8"],
  rowContainer8: ["rowContainer8"],
  brownColorBg: [
    "brownColorBg",
    "section12",
    "rowContainer3",
    "section13",
    "rowContainer9",
    "section14",
    "rowContainer10"
  ],
  section12: ["section12", "rowContainer3"],
  rowContainer3: ["rowContainer3"],
  section13: ["section13", "rowContainer9"],
  rowContainer9: ["rowContainer9"],
  section14: ["section14", "rowContainer10"],
  rowContainer10: ["rowContainer10"],
  footerTop: ["footerTop"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMainSection: "div";
  container: "div";
  navBar: typeof NavBar;
  h1: "h1";
  section1: "div";
  rowContainer8: "div";
  brownColorBg: "div";
  section12: "div";
  rowContainer3: "div";
  section13: "div";
  rowContainer9: "div";
  section14: "div";
  rowContainer10: "div";
  footerTop: typeof FooterTop;
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerMainSection: makeNodeComponent("headerMainSection"),
    container: makeNodeComponent("container"),
    navBar: makeNodeComponent("navBar"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    rowContainer8: makeNodeComponent("rowContainer8"),
    brownColorBg: makeNodeComponent("brownColorBg"),
    section12: makeNodeComponent("section12"),
    rowContainer3: makeNodeComponent("rowContainer3"),
    section13: makeNodeComponent("section13"),
    rowContainer9: makeNodeComponent("rowContainer9"),
    section14: makeNodeComponent("section14"),
    rowContainer10: makeNodeComponent("rowContainer10"),
    footerTop: makeNodeComponent("footerTop"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
